import argparse
import csv
from pathlib import Path

import matplotlib.image as mpimg
import matplotlib.pyplot as plt

from pal import Palette


def _main(path: Path, png_save: Path | None):
    with open(path / "data.csv") as f:
        reader = csv.DictReader(f)
        rows = [row for row in reader]

    # Some fancy matplotlib customization
    cfg = {
        "font.family": "monospace",
        "font.size": 8,
    }
    plt.style.use("dark_background")
    with plt.rc_context(cfg):
        nrows, ncols = len(rows), 3

        res = 3  # arbitrary figure resolution

        # XXX don't ask me why I need the constrained thing
        # Note: we can't create the whole layout in advance because one of the
        # ax is a 3D projection, and apparently it can't be changed later
        fig = plt.figure(figsize=(ncols * res, nrows * res), layout="constrained")

        for i, row in enumerate(rows):
            base_idx = i * ncols + 1

            # Best image
            ax_img = fig.add_subplot(nrows, ncols, base_idx)
            ax_img.imshow(mpimg.imread(path / row["opath"]))
            ax_img.set_title(Path(row["ipath"]).stem)

            # Palette of the best image
            pal = Palette.from_path(path / row["palpath"])
            ax_pal = fig.add_subplot(nrows, ncols, base_idx + 1, projection="3d")
            ax_pal.set_xlabel("L")
            ax_pal.set_ylabel("a")
            ax_pal.set_zlabel("b")
            for color in pal.colors:
                ax_pal.plot(*color.lab, ".", color=f"#{color.srgb_rgb:06x}")

            # All the MSE scores
            algos, mses = zip(
                *(
                    (k.removeprefix("mse_"), float(v))
                    for k, v in row.items()
                    if k.startswith("mse_")
                )
            )
            colors = ["C0"] * len(mses)
            colors[algos.index(row["best_mse"])] = "C1"
            ax_mse = fig.add_subplot(nrows, ncols, base_idx + 2)
            ax_mse.barh(algos, mses, color=colors, height=0.7)
            ax_mse.set_title("MSE")

    if png_save is None:
        plt.show()
    else:
        fig.savefig(png_save)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        "Display (or export as PNG) the results using matplotlib"
    )
    parser.add_argument("--png-save", type=Path, help="optional PNG export destination")
    parser.add_argument(
        "directory",
        type=Path,
        help="directory containing the data.csv generated by gen_results.py",
    )
    args = parser.parse_args()
    _main(args.directory, args.png_save)
